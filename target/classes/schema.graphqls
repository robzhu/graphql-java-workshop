type Link {
  id: ID!
  url: String!
  description: String!
  postedBy: User
}

type Query {
  allLinks: [Link]
  linkWithId(id: String!): Link
  findByUrl(url: String!): Link
}

type Mutation {
  createLink(url: String!, description: String!): Link
  createUser(input: NewUserInput!): User
  signinUser(auth: AuthData): SigninPayload
  createVote(linkId: ID, userId: ID): Vote
}

schema {
  query: Query
  mutation: Mutation
}

type User {
  id: ID!
  username: String!
  email: String
  password: String
}

input NewUserInput {
  username: String!
  email: String!
  password: String!
}

input AuthData {
  username: String!
  password: String!
}

type SigninPayload {
  token: String
  user: User
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime